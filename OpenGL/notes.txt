OpenGL 4.5 API Reference Card - Khronos
docs.gl
learnopengl.com
sudo apt-get install opengl-4-man-doc

Mesa source code
webglfundamentals.org
--------------------------------------------------------------------------------------------------------------------------------------

Graphics Rendering Pipeline


Vertex Specification
    ↓
Vertex Shader
    ↓
Tessellation (optional)
    ↓
Geometry Shader (optional)
    ↓
Vertex Post-Processing
    ↓
Primitive Assembly
    ↓
Rasterization
    ↓
Fragment Shader
    ↓
Per-Sample Operations



Rendering pipeline: A vertex/line/triangle (primitive)'s journey from 3D data to your 2D screen

1. Vertex Specification - specify a vertex or a series of vertices, really our geometry data.

Shader: Programmable part of our pipeline
    - Feature of Modern OpenGL that we can write programs on our GPU to control the graphics pipeline

2. Vertex Shader - Execute on each vertex, Positioning that vertex.

3. Tessellation - subdivision of geometry, to add more detail

4. Geometry Shader - generate more geometry from a point to make, let's say, a quad. maybe create an explosion effect.

5. Vertex Post-Processing

6. Primitive Assembly - Assembling the final geometry

7. Rasterization - screen is a grid of pixels, we approximate all the shapes by filling in the respective pixels. 
               depth test to check which shape gets drawn in front of the other.

8. Fragment Shader - Executes once on each fragment (pixels) *determine the final color of each of the pixels that we rasterize.

9. Per-Sample Operations - Depth testing, Scissor testing, reflections shadows etc. 


Takeaway - 
Our data in OpenGL, everytime we do a draw-call, has to go through this pipeline in an ordered manner


--------------------------------------------------------------------------------------------------------------------------------------

SDL2 => Simple DirectMedia Layer 

1. render a window -> Hold/Display the output from an OpenGL Context (large object that holds onto OpenGL)

OpenGL Context : A context that stores all the states associated with this instance of OpenGL. It represents the default 'framebuffer' that holds
                onto the rendering commands

2. Handling i/o 
3. Setup Subsystems Sound/Networking/Images
4. threading Support

--------------------------------------------------------------------------------------------------------------------------------------

Graphics Application build stages:

1. Initialize our scene
2. Main loop
    - Input 
    - Updates
    - Render/Pre-render
3. CleanUp function

--------------------------------------------------------------------------------------------------------------------------------------

OpenGL-Init ---> Version
             --> Context

--------------------------------------------------------------------------------------------------------------------------------------

## TRIANGLES ##

- sexy
- cool 
- planar
- triangle

3 vertices, 3 edges, 1 face 


OpenGL-Objects:

- Vertex Array Objects (VAO)
    - How to Access your VBO    

- Vertex Buffer Object (VBO)
    - Actual data
    - Array of data

             (x2, y2, z2)
 (x1, y1, z1) ---> △ <--- (x3, y3, z3)

    glGenBuffer(args, &myObject)
    glBindBuffer()
    glBufferData() ---------------------------> Populates it with data

VBO1 =   [ x1|y1|z1 | x2|y2|z2 | x3|y3|z3 ] (position of 3 vertices (floats))

glGenVertexArrays(howmany, &myVAO)
glBindVertexArray(&myVAO) 

        VAO1
---------------------+
- Attributes = postion, etc (attrs of the triangle in this case)
basically, how do i walk through VBO1



        VAO
---------------------+          VBO 
    Attr1--------------------->[ x, y, z,
    Attr1--------------------->  r, g, b ]



[ x1|y1|z1 | x2|y2|z2 | x3|y3|z3 ]

// Bind is OpenGL-speak for "select"


--------------------------------------------------------------------------------------------------------------------------------------

this is what goes on in a GPU ->

Vertex Specification : (VAOs and VBOs) specifying vertices std::vector<float> vertices = {x, y, z, ...}; then we ship things over to a VBO  
                    and then setting attributes with VAO
    ↓
*Vertex Shader       : positioning of vertices
    ↓
Tessellation (optional)
    ↓
Geometry Shader (optional)
    ↓
Vertex Post-Processing
    ↓
Primitive Assembly
    ↓
Rasterization
    ↓
*Fragment Shader     : executes once per fragment
    ↓
Per-Sample Operations



*absolute must-haves
--------------------------------------------------------------------------------------------------------------------------------------

OpenGL Objects, c-based objects
OpenGL Context (Mesa)
State Machine 

--------------------------------------------------------------------------------------------------------------------------------------

I wanna be able to compile my CPU program, and at Runtime load the shader code.
not to embedd them directly inside my program

this was done by adding the Shaders library and not having to recompile the whole source code to change the shader at runtime.

--------------------------------------------------------------------------------------------------------------------------------------

        VAO
---------------------+              VBO1 
    postion ---------------------> [ x1, y1, z1, x2, y2, z2, x3, y3, z3 ]
-                                   VBO2
    color   ---------------------> [ r, g, b ]
-
