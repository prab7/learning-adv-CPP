Resource Aquisition is Initialization - RAII

- scopes 
- lifetimes
- order of Initialization
- stack unwinding

#include <mutex>
#include <iostream>

std::mutex m;

void bad(){

    m.lock();                           // acquire the mutex
    f();                                // if f() throws an exception, the mutex is never released
    if(!everything_ok()) return;        // early return, the mutex is never released
    m.unlock();                         // if bad() reaches this statement, the mutex is released

}
void good(){
    
    std::lock_guard<std::mutex> lk(m);  // RAII class: mutex acquisition is initialization
    f();                                // if f() throws an exception, the mutex is released
    if(!everything_ok()) return;        // early return, the mutex is released
}                                       // if good() returns normally, the mutex is released

// OpenGL
// wrapper class
struct Surface {
    Surface(){
        surface = // allocate 
    }
    ~Surface(){
        SDL_FreeSurface(m_surface);
    }
    SDL_Surface* m_surface;
};